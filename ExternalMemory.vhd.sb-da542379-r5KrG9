-- ExternalMemory.VHD
-- 2024.10.22
--
-- This SCOMP peripheral provides one 16-bit word of external memory for SCOMP.
-- Any value written to this peripheral can be read back.

library ieee;
library altera_mf;
library lpm;

use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use altera_mf.altera_mf_components.all;
use lpm.lpm_components.all;


ENTITY ExternalMemory IS
    PORT(
		  CLOCK : IN STD_LOGIC;
        RESETN : IN    STD_LOGIC;
		  EXTMEM_INDEX_EN : IN STD_LOGIC;
		  EXTMEM_OFFSET_EN : IN STD_LOGIC;
		  EXTMEM_PERMISSION_EN     : IN STD_LOGIC;
		  EXTMEM_DATA_EN : IN STD_LOGIC;
        IO_WRITE : IN    STD_LOGIC;
        IO_DATA  : INOUT STD_LOGIC_VECTOR(15 DOWNTO 0)
    );
END ExternalMemory;

ARCHITECTURE a OF ExternalMemory IS	 
    SIGNAL PAGE_INDEX       : STD_LOGIC_VECTOR(1 DOWNTO 0) := "00";
    SIGNAL PAGE_OFFSET      : STD_LOGIC_VECTOR(15 DOWNTO 0) := "0000000000000000";
    SIGNAL MEM_DATA_INPUT   : STD_LOGIC_VECTOR(15 DOWNTO 0) := "0000000000000000";
    SIGNAL MEM_DATA_OUTPUT  : STD_LOGIC_VECTOR(15 DOWNTO 0) := "0000000000000000";
    SIGNAL DATA_OUTPUT      : STD_LOGIC_VECTOR(15 DOWNTO 0) := "0000000000000000";
    SIGNAL PERMISSION_LEVEL : STD_LOGIC_VECTOR(15 DOWNTO 0) := "0000000000000000";
    SIGNAL FINAL_ADDR       : STD_LOGIC_VECTOR(17 DOWNTO 0) := "000000000000000000";
	 SIGNAL EXTMEM_EN : STD_LOGIC := '0';

    BEGIN
	 
	 EXTMEM_EN <= EXTMEM_INDEX_EN or EXTMEM_OFFSET_EN or EXTMEM_PERMISSION_EN or EXTMEM_DATA_EN;
	 
	 
    -- Use Intel LPM IP to create tristate drivers
    IO_BUS: lpm_bustri
        GENERIC MAP (
        lpm_width => 16
    )
    PORT MAP (
        enabledt => EXTMEM_EN AND NOT(IO_WRITE), -- when extmem is writing
        data     => DATA_OUTPUT,  -- provide this value
        tridata  => IO_DATA -- driving the IO_DATA bus
    );
	 
    altsyncram_component : altsyncram
    GENERIC MAP (
        numwords_a => 262144,
        widthad_a => 18,
        width_a => 16,
        intended_device_family => "CYCLONE V",
        clock_enable_input_a => "BYPASS",
        clock_enable_output_a => "BYPASS",
        lpm_hint => "ENABLE_RUNTIME_MOD=NO",
        lpm_type => "altsyncram",
        operation_mode => "SINGLE_PORT",
        outdata_reg_a => "UNREGISTERED",
        outdata_aclr_a => "NONE",
        power_up_uninitialized => "FALSE",
        read_during_write_mode_port_a => "NEW_DATA_NO_NBE_READ",
        width_byteena_a => 1
    )
    PORT MAP (
        wren_a    => IO_WRITE,
        clock0    => CLOCK,
        address_a => FINAL_ADDR,
        data_a    => MEM_DATA_INPUT,
        q_a       => MEM_DATA_OUTPUT
    );
	 

    PROCESS
    BEGIN
        WAIT UNTIL RISING_EDGE(CLOCK);
				FINAL_ADDR <= PAGE_INDEX & PAGE_OFFSET;
		  
            IF IO_WRITE = '1' THEN -- If SCOMP is writing,
               IF EXTMEM_INDEX_EN = '1' THEN
						PAGE_INDEX <= IO_DATA (1 DOWNTO 0);
--						PAGE_INDEX <= "11";
					ELSIF EXTMEM_OFFSET_EN = '1' THEN
						PAGE_OFFSET <= IO_DATA ;
					ELSIF EXTMEM_DATA_EN = '1' THEN
						MEM_DATA_INPUT <= IO_DATA;
					ELSIF EXTMEM_PERMISSION_EN = '1' THEN
						PERMISSION_LEVEL <= IO_DATA;
					END IF;
				ELSIF IO_WRITE = '0' THEN
--					DATA_OUTPUT <= "00000000000" & EXTMEM_EN & EXTMEM_OFFSET_EN & EXTMEM_DATA_EN & EXTMEM_PERMISSION_EN & EXTMEM_INDEX_EN;
					IF EXTMEM_INDEX_EN = '1' THEN
						DATA_OUTPUT <= "00000000000000" & PAGE_INDEX;
						
					ELSIF EXTMEM_OFFSET_EN = '1' THEN
						DATA_OUTPUT <= PAGE_OFFSET;
					ELSIF EXTMEM_DATA_EN = '1' THEN
						DATA_OUTPUT <= MEM_DATA_OUTPUT;
					ELSIF EXTMEM_PERMISSION_EN = '1' THEN
						DATA_OUTPUT <= PERMISSION_LEVEL;
					END IF;
            END IF;
    END PROCESS;

END a;